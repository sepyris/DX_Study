#pragma once
// 지금 우리가 만드는 프로젝트처럼
// 메인 코드 쪽에서 모든 작업을 담당하지 않고,
// 프로그램의 전반적인 처리를 담당하는 클래스를 하나 만들어서
// 거기서 프로그램에 필요한 작업들들을 수행하는 것을 총괄하도록 만드는 방식으로
// 프로그램을 구성하는 경우가 많음

// 그래서 이 프로그램의 전반적인 흐름을 담당하는 본 클래스의 이름을
// Program이라 지은 것
// 즉, 이 클래스는 프로그램의 전반적인 처리를 총괄하는 클래스

class Program
{
private:
	Scene* scene;
	// 프로그램에서 하나의 장면을 담당하는 클래스
	// 이 클래스를 통해 우리는 실제 화면에서 출력되는 내용들을 직접 관리

	/*
	실제 게임은 여러 종류의 Scene을 이용해 만들어지기 때문에
	그 Scene의 개수가 얼마나 늘어날지 모르니
	vector를 이용해서 개수가 얼마가 됐던 편히 쓸수 있도록 리스트로 만들어둠
	*/


	

public:
	Program();
	~Program();

	void Update(); // 프로그램이 실행되면서 업데이트되어야 할 내용들을 관리
	void Render(); //		   ''		  화면에 출력될 내용들을 
	// 이 함수에서 도맡아 출력하도록 함

	void Create();
	// 이 클래스를 만들 때 초기화해야 하는 내용들을 생성자에서 분리해서 만듦
	void Delete();
	// 이 클래스의 사용이 종료되었을 때 처리해야 하는 내용들을
	// 소멸자에서 분리해서 만들고, 외부에서 호출이 가능한 형태로 만듦

	void CreateScene(UINT map_code,UINT area);
	//Scene등지에서 프로그램이 현재 다루는 scene을 다른것으로 바꾸고자 할 때 
	//호출하도록 하는 함수

};