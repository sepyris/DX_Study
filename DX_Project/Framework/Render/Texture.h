#pragma once
class Texture
/*
한 프로그램에서 같은 파일이 2번 이상 로드되는 일이 없도록,
한 번 불러온 이미지 파일을 순서 없는 map에 저장해 관리하는 클래스 및,
이를 static으로 관리함으로서 그 파일들 각각을 관리하는 하나의 시스템을 담당하는 클래스

이를 이름만 들으면 싱글톤과 착각할 수 있지만 약간의 차이가 있으며, 이는 관련 기능을 설명할 때 후술
*/
{
private:
	ScratchImage image;
	ID3D11ShaderResourceView* srv;
	// 사진 출력에 이용하는 클래스들
	// 이 클래스에서는 사진 파일을 한 번 불러오고 끝이 아니라
	// 여러 오브젝트에서 하나의 텍스처를 동시에 이용할 경우에는 다시 해당 이미지를 불러와야 하다보니,
	// 아예 처음부터 이미 자체를 클래스에서 보관하다가 필요할 때마다 이를 꺼내는 개념

	static unordered_map<wstring, Texture*> texture_data;
	// 싱글톤과의 제일 큰 차이점은 둘 이상의 인스턴스가 만들어질 수 있다는 것으로,
	// 그렇게 둘 이상 만들어진 인스턴스는 static 자료구조에 저장해두고
	// 같은 파일을 이용하려 하면 여기서 검색해서 나오는 인스턴스를 대신 이용하도록 만드는 구조

	Texture(ID3D11ShaderResourceView* srv, ScratchImage& image);
	~Texture();
	// 싱글톤 자체는 아니더라도 비슷한 디자인 패턴인 건 맞으므로,
	// 생성자와 소멸자를 private에 놓음으로서 생성자가 외부에서 호출되는 것을 막음
	// 1) 텍스쳐 하나의 용량이 상당히 클 수 있는 관계로, 그런 파일이 두 개 이상의 인스턴스로서 만들어지면
	// 프로그램이 무거워질 수 밖에 없음
	// 2) 이미지 파일의 형태를 한 악성코드가 실제로 존재하는 관계로,
	// 이런 것이 섞여들어올 수 있는 여지는 최대한 차단하는 게 좋음

public:
	// 나머지는 지금까지 한 번이라도 짚고 넘어간 적 있었던 내용에 전부 포함되어 있다 보니,
	// 자세한 설명은 생략
	static Texture* Add(wstring file);
	static void Delete();
	
	Vector2 GetSize();
	void Set(UINT slot = 0);
};