#pragma once
/*
1. DX에서 공간을 표현하는 법

3D 공간(현실) 그 자체를 한 번 생각해봅시다 :
어떤 물체가 어느 위치에 있는지,
우리는 어떻게 판단할 수 있는가?

-> 특정한 점 하나를 기준으로 잡고,
거기서 3개의 수직인 축을 잡아서 이를 기준 삼아
각각의 축의 방향으로 얼마만큼 떨어져있는지를 토대로 하여
최종적인 좌표를 이야기할 수 있음

이는 3D가 아닌 2D도 마찬가지
-> 하나의 판 안에서 기준을 잡고 X,Y좌표를 통해
기준에서 얼마나 떨어져있는지를 표기하는 형식으로 위치를 표시함

그런데, 2D와 3D를 가리지 않고 그 좌표를 결정하기 위해선
위에서도 이야기한 그 "기준"을 어떻게 잡을 것인지,
즉 "좌표계의 원점"을 어디로 할 것인지를 미리 정의해야 함
+
그렇게 공간에 나열된 오브젝트들을 한 화면에 담고 싶다 친다면
어디"에서" 본 부분을 출력할 것인지 역시 결정해야 함
+ 출력할 화면의 크기가 얼마나 되는지까지 결정해야 함
(이게 결정되지 않았다면 화면이 어디부터 어디까지를 출력하는지를
정의할 수 없어서 전체 3D 공간 중 어느 부분을 출력할지 모르게 됨)

따라서, 3D에서 화면을 그리기 위해선
개념적으론 다음과 같은 작업을 거치게 된다 :

1. 사물들의 위치를 측정하기 위해 기준점으로 삼을 원점을 지정
2. 원점을 통해 사물들의 위치를 측정
3. 원점을 통해 정의된 전체 3D 공간 중,
어느 지점에서 어느 방향을 바라볼 것인지를 결정 - 시점을 결정
4. 그렇게 바라보고 있는 범위를 어디부터 어디까지로 할 것인지 또 결정
5. 시점을 기준으로 하여,
바라보고 있는 이 사물들이 어떻게 보이는지를 기록
6. 그렇게 기록된 내용을 화면에 출력할 수 있는 형태로 가공

2D도 크게 다르지는 않으나, 이 중 3,4번의 경우엔 꽤 나중에 다루게 됨

이 외에도 원근법이라던가, 두 물체가 서로를 가릴 때
화면에서 어느 게 가려지는지 등등
시야예 따라 생각해야 하는 것이 상당히 많기 때문에 단순히 처리하기 힘듦

그래서 이를 위해 데이터상으로 존재하는 오브젝트들의 정보를
최종적으로 출력할 수 있는 데이터로 바꾸는 과정을 일종의 규격화를 하게 됨
이 때 진행하게 되는 작업이 WVP 변환
그리고 이 WVP 변환을 배우기 위해 같이 다뤄야 하는 것이
SRT 변환 행렬 - Transform의 생성자 쪽에서 설명하지 않았던 부분


2. SRT 변환 행렬
변환 행렬 : 어떤 위치 벡터가 주어졌을 때,
그 위치 벡터의 크기, 회전, 위치 등을 변환시키는 행렬
-> 주어진 위치 벡터를 우리가 원하는 형태로 변환시키기 위해
우리가 계산으로 구해야 할 행렬들

============================================
여기서 말하는 벡터 : 방향을 가진 값,
정확히는 어떤 하나의 원점에서 지정된 개수의 축만큼 따져
각각의 축의 방향으로 얼마만큼 떨어져있는지를 표기한 일렬 행렬

ex) 
원점에서 x 방향으로 10, y 방향으로 20, z 방향으로 30 떨어진 방향으로
날아가고 있는 드론이 있다 치면
해당 드론이 현재 날아가는 속도는 (10, 20, 30)이라고 표기할 수 있음
여기서의 이 (10, 20, 30)이 이 드론의 속도를 표현한 3차원 벡터

그 외에도 SRT 변환 행렬을 제대로 설명하기 위해서는
 * 단위행렬
 * 역행렬
 * 행렬의 곱셈
 * 벡터(위에서 이야기한 것 외에도 이것저것 더)

SRT 변환 행렬, WVP 변환에 직접적으로 쓰이는 건 아니지만
가급적 알아둬야 하는 내용이
 * 삼각함수
 * 벡터의 내적/외적

이 내용들을 모를 경우 이 이후 나가게 되는 내용들은
코드조차 이해하지 못하게 될 가능성이 매우 높으므로
이 중 하나라도 안다고 자신할 수 없는 게 있다면 반드시 공부해올 것

============================================

어떤 오브젝트의 3차원 공간에서의 위치를 따질 때
일반적으로는 (10, 20, 30)과 같이
(x, y, z) 방식으로 3개의 축을 기준으로 하여
각 축을 기준으로 원점에서 얼마나 떨어져있는지를 표기하는 방식으로 나타냄
다르게 말하면 어떤 물체의 위치를 위와 같이 썼다면
X축으로 10, Y축으로 20, Z축으로 30만큼 이동한 곳에
해당 오브젝트가 있다는 것
==> 이런 표현은 벡터의 표현법과 완전히 일치,
즉 어떤 한 오브젝트의 위치는
원점 (0,0,0)에서 x/y/z축 각각의 방향으로 
10/20/30만큼 뻗어나간 벡터라고 할 수 있음

-> 이 벡터에 행렬을 곱해서 그 값을 변환시킨다면
해당 벡터 = 해당 좌표가 전체 좌표계에서 위치하는 지점도 변한다

따라서 3D공간에 위치한 오브젝트의 좌표를 바꾸고 싶다면
그 오브젝트를 표시하는 데 사용된 벡터의 값에 적절한 행렬을 곱해
벡터의 값을 변환시켜야 함
<- 여기에 사용되는 것이 변환 행렬들

기본적으로 사용되는 변환 행렬은
크기(Scale), 회전(Rotation), 위치(이동)(Translation)의 3개 변환 행렬
이 셋을 통틀어서, 정확히는 이 3개의 행렬을 순서대로 곱해사
최종적으로 벡터를 변환시키기 위해 만들어지게 되는 하나의 행렬을
SRT 변환 행렬이라고 부름

이 SRT 변환 자체에 대한 설명은 WVP 변환 설명이 끝나고 나서
Transform을 설명할 떄 같이 설명함
이 SRT 변환 행렬을 구해야 오브젝트의 위치를 행렬로서 표현할 수 있음

왜 굳이 행렬로 정리하냐면
이렇게 구해진 행렬에 추가로 W(무의미), V, P 변환에 사용되는
각각의 변환 행렬을 마저 곱하는 식으로
각 오브젝트의 위치/크기/회전 등을 우리가 출력할 화면의 좌표계로 처리해
실제 그래픽에 출력되는 데이터로 변환을 해야 하는데
처음부터 그 행렬에 맞게 규격을 맞추는 것이
다른 방식으로 했다가 다시 변환하는 것보다는 훨씬 쉽기 때문

덤)W를 무의미하다고 쓴 이유는
지금 이렇게 구한 SRT 변환 행렬 그 자체가 
이 W 변환에 대응하는 변환 행렬이기 때문

단, 하나의 물체가 다른 물체의 위치에 직접적으로 연동되는 경우가 있는데
이럴 때는 자기 자신의 SRT 행렬 외에도 다른 월드 행렬이 필요해지기에
위의 W가 항상 무의미하지는 않다

3. WVP 변환
- 우리는 이 WVP 변환이라는 개념을 100% 다루진 않음
- 3D 공간을 이용하는 어지간한 엔진은 전부 사용하는 개념이라 중요하나,
- 전반적으로 수학 관련 설명이 지나치게 많이 들어가게 됨
- 본 반에서 이를 전부 설명하긴 힘들어서,
  이해에 필요한 최소한의 설명만 할 예정

WVP 변환이라는 개념은 3D 그래픽을 다룰 때 기본적으로 사용되는 개념
DX에서 공간을 표현할 떄 거치는 단계(위의 6단계)에서 설명한 내용 중
일부분을 좀 더 정리한 것
여기선 그 각각에 대해 좀 더 상세하게 설명

A. World 변환
3D/2D 공간에서 오브젝트가 어디에 위치해있나 정의하기 위해선
위치의 기준점이 될 원점을 정의할 필요가 있음

3D 그래픽 이론에서 어떤 물체의 좌표를 표현하기 위해선
각 오브젝트의 절대 좌표 -> 실제 공간에서 정확히 어느 위치에 존재하는지를
이 world라는 행렬에 저장해야 함

문제는, 그 공간이라는 것 자체가 어디를 기준점으로 하는 지
처음엔 명확히 정의되어있지 않음
-> 한 물체의 위치가 어디에 존재하는가를 명확히 명시하려면
그 때마다 어디를 기준점으로 할 것인지를 명시해줘야 함
-> 3D 공간에서 위치를 표현하려면,
반드시 그 물체가 어느 지점을 원점으로 하는 공간인지를,
즉 어떤 World를 사용하는 것인지를 매번 알릴 필요가 있다

그래서 같은 물체라 하더라도 어느 좌표(=World)를 기준으로 하는지에 따라
이 오브젝트의 위치를 표현하는 좌표가 달라질 수 있으므로,
오브젝트의 위치를 표현하기 위한 기준점으로서
World를 오브젝트의 SRT 변환 행렬에 적용(=곱)하여
실제 전체 공간에서 어디에 있는지를 표기할 수 있도록 변환을 해줘야 함
이 전반적인 과정이 World 변환

이 과정을 각 단계별로 축약해 정리하면

ㄱ - 기준점이 될 전체 공간의 World를 확보
ㄴ - 출력할 오브젝트의 SRT 변환 행렬을 계산
ㄷ - 오브젝트의 SRT 변환 행렬에 World를 곱해,
	 실제 공간의 어디에 위치해있는지,
	 그 동시에 어떻게 위치해있는지(어떻게 생겼는지) 등등을 확정

이 World 행렬을 반드시 익혀둬야 하는 이유 :
우리가 오브젝트의 위치를 관리할 때
전체 공간만을 기준으로 하지 않는 경우가 훨씬 많기 때문
-> 각 오브젝트는 전체 공간을 기준으로 배치될 수도 있겠지만,
다른 오브젝트의 위치에 종속되어
종속된 오브젝트의 위치를 항상 따라가야 하는 경우가 발생할 수 있기 때문

ex| 리그 오브 레전드의 "유미" 같은 캐릭터의 경우
거의 항상 다른 캐릭터에 붙어서 게임을 진행하게 되며,
기본적으로는 그 다른 캐릭터가 움직이는 것에 완전히 종속되어
같이 움직이게 됨
-> 이 경우, 유미라는 캐릭터의 움직임을 
들러붙은 캐릭터와 똑같이 이동시키는 게 아니라
유미라는 캐릭터의 위치 자체를 
"들러붙은 캐릭터에서 일정 거리만큼 떨어져있다"라고 상대 경로로 지정하면
들러붙은 캐릭터가 움직이는 값만 지정해줘도
유미의 실제 위치가 그대로 바뀌도록 할 수 있다(유미의 값은 그대로여도!)

이런 것을 구현하기 위해,
이 유미라는 오브젝트의 현재 위치를 나타내는 SRT 변환 행렬에
그 들러붙는 캐릭터 쪽의 움직임 등이 완전히 반영된
해당 캐릭터의 World 행렬을 곱하는 것으로 추가적인 연산이나 값 변경 없이
유미의 캐릭터 위치를 완벽하게 그 들러붙은 캐릭터의 위치와 연동시킴

이런 것을 앞으로 우리가 정말 자주 쓸 것이기 때문에
이 World 행렬만큼은 어떤 행렬인지 정확히 알아둬야 함

그래서 그 World를 한 줄로 정의하면
"공간 그 자체를 정의, 어느 공간에 위치하는지를 표시하는 역할"

B. View(시점, 카메라) 변환
World 변환을 통해 공간 어디에 위치시킬지는 해결됐음
하지만, 이를 그래픽으로 표현하기 위해선 = 그 공간을 화면에 담으려면
적어도 "전체 공간 중에 어느 부분을 보고 있다"라고 명시할 필요가 있음

결국, 화면을 찍을 카메라가 필요하다는 결론에 이르게 됨
그리고 카메라로 사진을 찍으려면
그 카메라가 볼 수 있는 곳에 오브젝트들이 있어야 할 것
-> 물체들을 카메라가 위치한 공간에서 바라보는 것처럼 보이게,
각 오브젝트들이 가진 좌표를 카메라의 위치에 맞게
변환(회전)해주는 작업을 해야 한다 <- View 변환

간단히 말하면 물체들이 카메라의 위치에 따라 어떯게 보이는지를
데이터상으로 표현시키는 작업

View 변환은 크게 2가지 방법이 존재
 * Roll/Pitch/Yaw라는 3개 축을 이용해서 만들어지는 각 회전행렬 곱하기
 * 카메라의 위치 자체를 벡터로 구한 뒤
   이 벡터의 회전축을 구해서 각 오브젝트에 적용하기

3D에서는 이 2개 방법을 전부 쓰지만,
2D에서는 이 중 위쪽, 그마저도 그 중 일부만 사용하므로
우리가 이를 직접 다룰 일은 어지간하면 없을 것

C. Projection(투영) 변환

각 오브젝트들의 위치, 회전 등을 시점에 맞게 변환시켰으면
이제 각 오브젝트들은 카메라의 위치에 따라서
원근법에 맞게 커지거나 작아져야 함

실제로는 각각 고유의 값을 가지고 있는 오브젝트들의 실제 크기지만,
시점에 따라선 원근겁에 따라 크게 보일 수도, 작게 보일 수도 있다

이런 것을 거리 등에 따라 실제 화면에 얼마만큼 크게 그릴지 결정하는데,
이를 투영 행렬을 만들어 곱해주는 식으로 정리함
카메라에서 일정 거리 떨어진 것을 기준으로
멀면 그만큼 작게, 가까우면 그만큼 크게 정리하는 식

화면의 비율 같은 것도 이 단계에서 맞추며,
화면의 좌표계를 다른 걸 쓰고 있었다면 이 단계에서 고정하기도 함
- 기존의 -1.0~1.0까지의 상대좌표 대신 API 시절의 좌표계를 이용하게 된
원인이기도 함


이 각각에 대한 모든 내용은 각 부분을 실제로 구현해보면서 진행할 예정
(정확히는 만들어뒀던 부분을 이거저거 해설하면서 진행)
+ 지금 설명한 내용은 상술했듯 필요최소한의 설명만 한 것
조금이라도 3D 그래픽 프로그래밍에 관심이 있다면
WVP 변환이라 검색해서 나오는 내용들을 추가로 공부할 것을 권장

*/