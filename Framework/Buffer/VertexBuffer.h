#pragma once

/*
버퍼 : 프로그램에서 사용할 데이터 등을 미리 저장해두고
사용해야 할 때가 오면 그 데이터를 시스템에 넘기는
자료의 임시 저장영역 비슷한 것을 말함

DirectX에선 셰이더에서 데이터를 처리할 때 특정 규격에 맞는 데이터만 처리가 가능한데
그 규격에 맞게 저장하는 역할을 ID3D11Buffer가 맡고 있음

DX에서 버퍼가 사용되는 용도가 한둘이 아니기 때문에,
저 클래스를 그대로 사용하자니 해야 하는 작업이 너무 많아짐
그걸 아예 클래스의 생성자 등에 박아서 알아서 처리되도록 하기 위해
저 ID3D11Buffer를 다루는 클래스를 만들어두는 것이
Framework/Buffer 폴더에 들어올 내용들
*/

class VertexBuffer // 정점 데이터를 취급할 버퍼를 담당하는 클래스
{
private:
	ID3D11Buffer* buffer;

	UINT stride;
	// 이 클래스(인스턴스)에서 저장하고 있는 버퍼가
	// 한 칸마다 사용하는 용량을 UINT(부호 없는 정수)에 저장하는 역할

	// DX 시스템에선 버퍼가 하나의 데이터 단위에 얼마만큼의 자료를 보유하는가를
	// 직접적으로 판단할 수 없음
	// (셰이더는 HLSL 언어를 통해 동작하기 때문에,
	// C++에서 전달받은 자료를 직접적으로 분석할 수 없기 때문)
	// 그래서 아예 변수로서 용량을 전달해
	// 그런 분석작업 없이도 어디부터 어디까지가 하나의 데이터인지
	// 판별할 수 있도록 도와주는 역할

	UINT offset;
	// 현재 사용 중인 데이터의 인덱스를 명시하는 값
	// 2D를 다루는 중에는 사용할 일이 없는 데이터라서
	// 이런 게 있다는 것만 기억해도 문제 없음

public:
	VertexBuffer(void* data, UINT s, UINT count);
	~VertexBuffer();

	void Set(D3D11_PRIMITIVE_TOPOLOGY type);
	// 오브젝트를 출력하기 위해 세팅해야 했던,
	// 버퍼를 셰이더에 넘기는 작업과
	// 어떤 도형을 출력할 것인지 명시하는 작업을
	// 아예 버퍼 자체를 다루는 본 클래스의 함수를 통해 진행

};